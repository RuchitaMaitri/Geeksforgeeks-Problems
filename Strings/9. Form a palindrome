#This is a basic approach; efficient solution will be done after studying DP
def countMin(self, Str):
        # code here
        def check(Str,l,h):
            import sys
            if (l>h):
                return sys.max_size
            if (l==h):
                return 0
            if (l==h-1):
                if Str[l]==Str[h]:
                    return 0
                else:
                    return 1
            if (Str[l]==Str[h]):
                return check(Str,l+1,h-1)
            else:
                return (min(check(Str,l,h-1),check(Str,l+1,h))+1)
        return check(Str,0,(len(Str)-1))
#Approach using DP
    def countMin(self, Str):
        # code here
        dp = [ [0]*len(Str) for _ in range(len(Str)) ]
        # dp = [[0]*len(Str)]*len(Str)
        # print(dp)
        for k in range(0, len(Str)):
            for i in range(0, len(Str)-k):
                j=i+k
                if(k==0):
                    dp[i][i]=0
                elif(k==1):
                    if(Str[i]==Str[i+1]):
                        dp[i][i+1]=0
                    else:
                        dp[i][i+1]=1
                else:
                    if(Str[i]==Str[j]):
                        dp[i][j]=dp[i+1][j-1]
                    else:
                        dp[i][j]=min(dp[i+1][j], dp[i][j-1])+1
        # print(dp)
        return dp[0][len(Str)-1]
        
# C++ code using DP

int countMin(string Str){
    //complete the function here
    
        int dp[Str.size()][Str.size()];
        int i,k,j;
        
        
        
        for(k=0; k< Str.size(); k++){
            for(i=0; i<Str.size()-k; i++){
                j=i+k;
                if(k==0) 
                    dp[i][i]=0;
                else if (k==1){
                    if(Str[i]==Str[i+1])
                        dp[i][i+1]=0;
                    else
                        dp[i][i+1]=1;
                }
                else{
                    if(Str[i]==Str[j])
                        dp[i][j]=dp[i+1][j-1];
                    else
                        dp[i][j]=min(dp[i+1][j], dp[i][j-1])+1;
                }
            }
            
        }
        return dp[0][Str.size()-1];
    
    
